name: Backend CI/CD

on:
  push:
    branches: [ main ]        # Solo se ejecuta en pushes a main
  pull_request:
    branches: [ main ]        # También corre tests en PRs a main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]  # Probar en múltiples versiones de Python

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install test dependencies
        run: |
          pip install pytest pytest-asyncio pytest-mock httpx

      - name: Run tests with coverage
        run: |
          echo " Running tests with Python ${{ matrix.python-version }}..."
          python -m pytest -v --tb=short
          echo " All tests passed!"

      - name: Test database connection utility
        run: |
          echo " Testing database connection utility..."
          python db/test_connection.py || true  # No fallar si no hay conexión en CI
          echo " Database utility test completed!"

  deploy:
    name: Deploy to Render
    needs: test  # Solo hacer deploy si los tests pasan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Solo deploy en main branch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Render
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          echo " Triggering deploy to Render..."
          echo " Tests passed, proceeding with deployment..."
          response=$(curl -s -o response.json -w "%{http_code}" -X POST "$RENDER_DEPLOY_HOOK")
          echo "Render response code: $response"
          cat response.json
          if [ "$response" -ne 200 ]; then
            echo " Deploy failed. See above response."
            exit 1
          fi
          echo " Deploy triggered successfully!"