name: Backend CI/CD

on:
  push:
    branches: [ main ]        # Solo se ejecuta en pushes a main
  pull_request:
    branches: [ main ]        # Tambi√©n corre tests en PRs a main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]  # Probar en m√∫ltiples versiones de Python

    env:
      # Variables de entorno para testing
      DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
      SUPABASE_URL: https://fake-supabase-url.supabase.co
      SUPABASE_ANON_KEY: fake-anon-key-for-testing
      SUPABASE_SERVICE_ROLE_KEY: fake-service-role-key-for-testing
      OPENAI_API_KEY: sk-fake-openai-key-for-testing

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install test dependencies
        run: |
          pip install pytest pytest-asyncio pytest-mock httpx

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "üîÑ Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U testuser; then
              echo "‚úÖ PostgreSQL is ready!"
              break
            fi
            echo "‚è≥ Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done

      - name: Test database connection
        run: |
          echo "ÔøΩ Testing database connection..."
          python -c "
          import os, sys
          try:
              from sqlalchemy import create_engine, text
              engine = create_engine('$DATABASE_URL')
              with engine.connect() as conn:
                  result = conn.execute(text('SELECT 1 as test'))
                  print('‚úÖ Database connection successful!')
          except Exception as e:
              print(f'‚ö†Ô∏è Database connection failed: {e}')
              print('Continuing with limited testing...')
          "

      - name: Run basic tests (critical for deployment)
        run: |
          echo "üß™ Running basic tests with Python ${{ matrix.python-version }}..."
          echo "üìä These tests must pass for deployment to proceed..."
          python -m pytest tests/test_simple.py tests/test_estructura.py tests/test_logica_simple.py tests/test_resumen.py tests/test_endpoints_basicos.py -v --tb=short
          echo "‚úÖ Critical tests passed!"

      - name: Run resilient endpoint tests (additional coverage)
        run: |
          echo "üß™ Running resilient endpoint tests..."
          echo "üìä These tests verify endpoints exist without requiring full database..."
          python -m pytest tests/test_endpoints_resilientes.py -v --tb=short
          echo "‚úÖ Resilient tests completed!"

      - name: Run all tests (informational)
        continue-on-error: true
        run: |
          echo "üß™ Running ALL tests (informational, failures won't block deployment)..."
          python -m pytest -v --tb=short || echo "‚ö†Ô∏è Some tests failed, but deployment can proceed"

      - name: Test database connection utility
        run: |
          echo " Testing database connection utility..."
          python db/test_connection.py || true  # No fallar si no hay conexi√≥n en CI
          echo " Database utility test completed!"

  deploy:
    name: Deploy to Render
    needs: test  # Solo hacer deploy si los tests pasan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Solo deploy en main branch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Render
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_ASSISTANT_ID: ${{ secrets.OPENAI_ASSISTANT_ID }}
          OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}


        run: |
          echo " Triggering deploy to Render..."
          echo " Tests passed, proceeding with deployment..."
          response=$(curl -s -o response.json -w "%{http_code}" -X POST "$RENDER_DEPLOY_HOOK")
          echo "Render response code: $response"
          cat response.json
          if [ "$response" -ne 200 ]; then
            echo " Deploy failed. See above response."
            exit 1
          fi
          echo " Deploy triggered successfully!"