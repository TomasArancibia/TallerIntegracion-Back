-- EJECUTAR COMPLETO PARA RECREAR EL ESQUEMA Y CARGAR DATOS DE REFERENCIA

-- Tipos ENUM necesarios
DROP TYPE IF EXISTS rol_usuario CASCADE;
DROP TYPE IF EXISTS estado_solicitud CASCADE;

CREATE TYPE rol_usuario AS ENUM ('ADMIN', 'JEFE_AREA');
CREATE TYPE estado_solicitud AS ENUM ('pendiente', 'en_proceso', 'cerrada');

-- Tablas maestras jerárquicas
CREATE TABLE institucion (
    id_institucion      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_institucion  VARCHAR(120) NOT NULL UNIQUE
);

CREATE TABLE edificio (
    id_edificio     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_edificio VARCHAR(120) NOT NULL,
    id_institucion  INT NOT NULL REFERENCES institucion(id_institucion) ON DELETE RESTRICT,
    CONSTRAINT ux_edificio UNIQUE (id_institucion, nombre_edificio)
);

CREATE TABLE piso (
    id_piso     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    numero_piso INT NOT NULL,
    id_edificio INT NOT NULL REFERENCES edificio(id_edificio) ON DELETE RESTRICT,
    CONSTRAINT ux_piso UNIQUE (id_edificio, numero_piso)
);

CREATE TABLE area (
    id_area     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_area VARCHAR(120) NOT NULL UNIQUE
);

CREATE TABLE servicio (
    id_servicio     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_servicio VARCHAR(120) NOT NULL UNIQUE
);

CREATE TABLE habitacion (
    id_habitacion     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_habitacion VARCHAR(50) NOT NULL,
    id_piso           INT NOT NULL REFERENCES piso(id_piso) ON DELETE RESTRICT,
    id_servicio       INT NOT NULL REFERENCES servicio(id_servicio) ON DELETE RESTRICT,
    CONSTRAINT ux_habitacion UNIQUE (id_piso, nombre_habitacion)
);

CREATE TABLE cama (
    id_cama          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    letra_cama       VARCHAR(4) NOT NULL,
    id_habitacion    INT NOT NULL REFERENCES habitacion(id_habitacion) ON DELETE RESTRICT,
    identificador_qr VARCHAR(32) NOT NULL UNIQUE,
    activo           BOOLEAN NOT NULL DEFAULT TRUE,
    CONSTRAINT ux_cama_por_hab UNIQUE (id_habitacion, letra_cama)
);

-- Perfil de usuario vinculado a Supabase Auth (auth.users.id)
CREATE TABLE usuario (
    id             UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    rol            rol_usuario NOT NULL,
    correo         VARCHAR(160) NOT NULL UNIQUE,
    nombre         VARCHAR(80) NOT NULL,
    apellido       VARCHAR(80) NOT NULL,
    telefono       VARCHAR(30),
    id_area        INT REFERENCES area(id_area) ON DELETE SET NULL,
    activo         BOOLEAN NOT NULL DEFAULT TRUE,
    creado_en      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    actualizado_en TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE solicitud (
    id_solicitud        INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_cama             INT NOT NULL REFERENCES cama(id_cama) ON DELETE RESTRICT,
    id_area             INT NOT NULL REFERENCES area(id_area) ON DELETE RESTRICT,
    tipo                VARCHAR(120) NOT NULL,
    descripcion         TEXT,
    estado_actual       estado_solicitud NOT NULL DEFAULT 'pendiente',
    fecha_creacion      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    fecha_actualizacion TIMESTAMPTZ,
    fecha_cierre        TIMESTAMPTZ,
    nombre_solicitante  VARCHAR(120),
    correo_solicitante  VARCHAR(160)
);

-- Índices adicionales
CREATE INDEX ix_solicitud_estado ON solicitud(estado_actual);
CREATE INDEX ix_solicitud_cama ON solicitud(id_cama);
CREATE INDEX ix_habitacion_servicio ON habitacion(id_servicio);
CREATE INDEX ix_cama_habitacion ON cama(id_habitacion);
CREATE INDEX ix_piso_edificio ON piso(id_edificio);

-- =========================
-- DATOS DE REFERENCIA
-- =========================

INSERT INTO institucion (id_institucion, nombre_institucion) VALUES
    (1, 'Hospital UC CHRISTUS'),
    (2, 'Clínica UC');

INSERT INTO edificio (id_edificio, nombre_edificio, id_institucion) VALUES
    (1, 'A', 1),
    (2, 'B', 1),
    (3, 'C', 1),
    (4, 'D', 1),
    (5, 'E', 1),
    (6, 'CUC', 2),
    (7, 'Patio Central', 1),
    (8, 'Auditorio', 1),
    (9, 'G', 1),
    (10, 'F', 1);

INSERT INTO piso (id_piso, numero_piso, id_edificio) VALUES
    (1, 4, 1),
    (2, 2, 2),
    (3, 4, 2),
    (4, 4, 3),
    (5, 5, 3),
    (6, 2, 4),
    (7, 4, 4),
    (8, 2, 5),
    (9, 4, 5),
    (10, 2, 6),
    (11, 3, 6),
    (12, 4, 6);

INSERT INTO area (id_area, nombre_area) VALUES
    (1, 'Mantención'),
    (2, 'Nutrición y alimentación a pacientes'),
    (3, 'Limpieza de habitación, baño o box'),
    (4, 'Asistencia social'),
    (5, 'Acompañamiento espiritual');

INSERT INTO servicio (id_servicio, nombre_servicio) VALUES
    (1, 'Oncología'),
    (2, 'MQ'),
    (3, 'Pediatría'),
    (4, 'UCI Pediátrica'),
    (5, 'Intermedio'),
    (6, 'UPC Adulto'),
    (7, 'Maternidad'),
    (8, 'Oncopediatría'),
    (9, 'General'),
    (10, 'Administrativo'),
    (11, 'Consultas Médicas'),
    (12, 'Consultas Médicas Kine'),
    (13, 'Pre-parto'),
    (14, 'Procedimientos'),
    (15, 'UTA'),
    (16, 'Imagenología'),
    (17, 'IMAGEN/UTM'),
    (18, 'Urgencia'),
    (19, 'Sueño'),
    (20, 'Gerencia'),
    (21, 'UCI Intermedio'),
    (22, 'Centro Médico');

INSERT INTO habitacion (id_habitacion, nombre_habitacion, id_piso, id_servicio) VALUES
    (1, '201-1', 2, 2),
    (2, '201-2', 2, 2),
    (3, '202-1', 2, 2),
    (4, '202-2', 2, 2),
    (5, '202-3', 2, 2),
    (6, '203-1', 3, 2),
    (7, '203-2', 3, 2),
    (8, '204-1', 3, 2),
    (9, '204-2', 3, 2),
    (10, '205-1', 3, 2);

INSERT INTO cama (id_cama, letra_cama, id_habitacion, identificador_qr, activo) VALUES
    (1, 'A', 1, 'H1-201-1-A', TRUE),
    (2, 'B', 1, 'H1-201-1-B', TRUE),
    (3, 'A', 2, 'H1-201-2-A', FALSE),
    (4, 'B', 2, 'H1-201-2-B', TRUE),
    (5, 'A', 3, 'H1-202-1-A', FALSE),
    (6, 'B', 3, 'H1-202-1-B', TRUE),
    (7, 'A', 4, 'H1-202-2-A', TRUE),
    (8, 'B', 4, 'H1-202-2-B', TRUE),
    (9, 'A', 5, 'H1-202-3-A', TRUE),
    (10, 'A', 6, 'H1-203-1-A', TRUE);

-- Usuarios: se crean vía Supabase Auth; mantener la tabla vacía por defecto.
-- INSERT INTO usuario (...) VALUES (...);

INSERT INTO solicitud (id_solicitud, id_cama, id_area, tipo, descripcion, estado_actual, fecha_creacion, fecha_actualizacion, nombre_solicitante, correo_solicitante)
VALUES
    (1, 1, 1, 'Falla en luz de cabecera', 'La luz de cabecera no enciende correctamente', 'pendiente', NOW() - INTERVAL '2 hours', NOW() - INTERVAL '2 hours', 'María Pérez', 'maria@uc.cl'),
    (2, 2, 3, 'Derrame en piso', 'Se derramó líquido en el piso de la habitación', 'en_proceso', NOW() - INTERVAL '1 day', NOW() - INTERVAL '12 hours', 'Carlos Soto', 'carlos@uc.cl'),
    (3, 4, 2, 'Revisión de dieta', 'Solicitamos revisar la dieta del paciente', 'pendiente', NOW() - INTERVAL '30 minutes', NOW() - INTERVAL '30 minutes', 'Equipo Enfermería', 'turno@uc.cl'),
    (4, 5, 1, 'Baranda suelta', 'La baranda de la cama está suelta', 'cerrada', NOW() - INTERVAL '3 days', NOW() - INTERVAL '1 day', 'Beatriz R.', 'beatriz@uc.cl'),
    (5, 7, 4, 'Apoyo a familiar', 'Requieren apoyo para un familiar del paciente', 'pendiente', NOW() - INTERVAL '5 hours', NOW() - INTERVAL '5 hours', 'Recepción', 'recepcion@uc.cl');

-- Ajustar secuencias para que futuros INSERT utilicen IDs consecutivos
SELECT setval('institucion_id_institucion_seq', COALESCE((SELECT MAX(id_institucion) FROM institucion), 0), true);
SELECT setval('edificio_id_edificio_seq', COALESCE((SELECT MAX(id_edificio) FROM edificio), 0), true);
SELECT setval('piso_id_piso_seq', COALESCE((SELECT MAX(id_piso) FROM piso), 0), true);
SELECT setval('area_id_area_seq', COALESCE((SELECT MAX(id_area) FROM area), 0), true);
SELECT setval('servicio_id_servicio_seq', COALESCE((SELECT MAX(id_servicio) FROM servicio), 0), true);
SELECT setval('habitacion_id_habitacion_seq', COALESCE((SELECT MAX(id_habitacion) FROM habitacion), 0), true);
SELECT setval('cama_id_cama_seq', COALESCE((SELECT MAX(id_cama) FROM cama), 0), true);
SELECT setval('solicitud_id_solicitud_seq', COALESCE((SELECT MAX(id_solicitud) FROM solicitud), 0), true);

-- Verificación rápida
SELECT 'institucion' AS tabla, COUNT(*) AS registros FROM institucion
UNION ALL
SELECT 'edificio', COUNT(*) FROM edificio
UNION ALL
SELECT 'piso', COUNT(*) FROM piso
UNION ALL
SELECT 'servicio', COUNT(*) FROM servicio
UNION ALL
SELECT 'area', COUNT(*) FROM area
UNION ALL
SELECT 'habitacion', COUNT(*) FROM habitacion
UNION ALL
SELECT 'cama', COUNT(*) FROM cama
UNION ALL
SELECT 'solicitud', COUNT(*) FROM solicitud;

SELECT 'Seed exhaustivo completado' AS status;
